using SpreadsheetGrid_Framework;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using SS;
using System.IO;
using System.Security;

namespace SpreadsheetGrid_Core
{
    public partial class Form1 : Form
    {
        Spreadsheet spreadsheet = new Spreadsheet(s => true, s => s.ToUpper(), "six");
        public Form1()
        {
            this.grid_widget = new SpreadsheetGridWidget();

            // Call the AutoGenerated code
            InitializeComponent();

            // Add event handler and select a start cell
            grid_widget.SelectionChanged += grid_widget_Click;
            grid_widget.SetSelection(1, 1, false);


        }

        public Form1(String file)
        {
            Spreadsheet spreadsheet = new Spreadsheet();
            spreadsheet.GetSavedVersion(file);
            
        }
        /// <summary>
        /// Given a spreadsheet, find the current selected cell and
        /// create a popup that contains the information from that cell
        /// </summary>
        /// <param name="ss"></param>
        private void DisplaySelection(SpreadsheetGridWidget ss)
        {
            int row, col;

            string value;
            ss.GetSelection(out col, out row);
            ss.GetValue(col, row, out value);
            // if cell is "" (empty) puts the current date and time when clicked on
            if (value == "")
            {
                ss.SetValue(col, row, DateTime.Now.ToLocalTime().ToString("T"));
                ss.GetValue(col, row, out value);
                MessageBox.Show("Selection: column " + col + " row " + row + " value " + value);
            }
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            MessageBox.Show("test");
        }

        // Deals with the New menu
        private void NewToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // Tell the application context to run the form on the same
            // thread as the other forms.
            Spreadsheet_Window.getAppContext().RunForm(new Form1());
        }

        // Deals with the Close menu
        private void CloseToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Close();
        }

        // Deals with Save menu
        private void saveToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveFile = new SaveFileDialog();
            saveFile.Filter = "sprd files (*.sprd)|*.sprd| All files(*.*)|*.*";
            saveFile.FilterIndex = 1;
            saveFile.RestoreDirectory = true;

            if (saveFile.ShowDialog() == DialogResult.OK)
            {
                spreadsheet.Save(saveFile.FileName);
            }
        }

        // Deals with Open menu
        private void openToolStripMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFile = new OpenFileDialog();
            openFile.Filter = "sprd files (*.sprd)|*.sprd| All files(*.*)|*.*";
            openFile.FilterIndex = 2;
            openFile.RestoreDirectory = true;
            if (openFile.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    string filepath = openFile.FileName;
                    using (Stream sr = openFile.OpenFile())
                    {
                        grid_widget.Clear();
                        spreadsheet = new Spreadsheet(filepath, s=>true, s => s.ToUpper(), "six");
                        foreach (string name in spreadsheet.GetNamesOfAllNonemptyCells())
                        {
                            // turn into row column from name
                            GetCellLocation(name, out int row, out int col);
                            // get cellvalue and put into the grid 
                            grid_widget.SetValue((col - 1), (row - 1), spreadsheet.GetCellValue(name).ToString());
                        }
                    }
                }
                catch (SecurityException ex)
                {
                    MessageBox.Show($"Security error.\n\nError message: {ex.Message}\n\n" +
                    $"Details:\n\n{ex.StackTrace}");
                }
            }
        }

        private void GetCellLocation(string name, out int col, out int row)
        {
            // convert name to char array
            char[] rowInfo = name.ToCharArray();
            // onlyRow will get the row letter
            char onlyRow = rowInfo[0];
            // set column to the numbers remaining in rowInfo
            string column = "";
            for (int i = 1; i < rowInfo.Length; i++)
            {
                column += rowInfo[i];
            }
            // convert to ints
            int.TryParse(column, out col);
            // ascii value used get row number
            row = char.ToUpper(rowInfo[0]) - 64;
        }

        /// private helper method to store in file name 
        /// create another constructor with helper method 
        /// take new spreadsheet and display on grid_widget

        /// <summary>
        /// Textbox handler
        /// </summary>
        /// <param name="sender"> the textbox </param>
        /// <param name="e">not used</param>
        private void sample_textbox_TextChanged(object sender, EventArgs e)
        {
            TextBox box = sender as TextBox;

            grid_widget.SetValue(2, 2, box.Text);

        }

        private void CellContentsTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (sender is TextBox)
                {
                    UpdateContentsTextBox();
                    UpdateValueTextBox();
                }
            }
        }

        // helper methods for CellContentsTextBox_KeyDown
        /// <summary>
        /// Updates CellValueTextBox, if a string is entered the text box is updated with a string, if a double is entered the text box is updated with a double,
        /// if a formula is is entered the formula is evaluated then the text box is updated with the result.
        /// </summary>
        private void UpdateValueTextBox()
        {
            // get column and row location
            grid_widget.GetSelection(out int col, out int row);
            // use ascii value to convert column location to a letter
            char letter = (char)('A' + col);
            string rowLocation = "" + letter;
            // append rowLocation and col.ToString() and set to cellLocation
            string cellLocation = rowLocation + col.ToString();
            // calculate value of cell
            CellValueTextBox.AppendText(spreadsheet.GetCellValue(cellLocation).ToString());
        }
        /// <summary>
        /// Updates CellContentsTextBox with entered text
        /// </summary>
        private void UpdateContentsTextBox()
        {
            // get column and row location
            grid_widget.GetSelection(out int col, out int row);
            // use ascii value to convert column location to a letter
            char letter = (char)('A' + col);
            string colLocation = "" + letter;
            // set cell location with rowLocation and col.ToString
            string cellLocation = colLocation + (row + 1).ToString();
            // setContentsOfCell in our spreadsheet
            spreadsheet.SetContentsOfCell(cellLocation, CellContentsTextBox.Text);
            // set cell with same contents as CellContentsTextBox
            grid_widget.SetValue(col, row, CellContentsTextBox.Text);
        }

        private void SelectedCellLabel_Click_1(object sender, EventArgs e)
        {
        }

        private void CellValueLabel_Click(object sender, EventArgs e)
        {

        }

        private void CellContentsLabel_Click(object sender, EventArgs e)
        {

        }
        private void grid_widget_Click(SpreadsheetGridWidget ss)
        {
            // TODO need to update name, value, and contents textbox
            UpdateSelectedCellTextBox();
            UpdateContentsOnClick();
            UpdateValuesOnClick();


        }
        // Helper methods for grid_widget_Click
        /// <summary>
        /// Updates the SelectedCellTextBox with the appropriate cell name
        /// </summary>
        private void UpdateSelectedCellTextBox()
        {
            SelectedCellTextBox.Text = GetCellName();
        }
        /// <summary>
        /// Gets the cell name by using the column and rows
        /// </summary>
        /// <returns></returns>
        private string GetCellName()
        {
            // get column and row location
            grid_widget.GetSelection(out int col, out int row);
            // use ascii value to convert column location to a letter
            char letter = (char)('A' + col);
            string rowLocation = "" + letter;
            // append rowLocation and col.ToString() and set to cellLocation
            string cellLocation = rowLocation + (row + 1).ToString();
            return cellLocation;
        }
        /// <summary>
        /// Updates CellContentsTextBox with the contents when the cell is clicked on
        /// </summary>
        private void UpdateContentsOnClick()
        {
            grid_widget.GetSelection(out int col, out int row);
            grid_widget.GetValue(col, row, out string value);
            CellContentsTextBox.Text = value;
        }

        /// <summary>
        /// Updates CellValueTextBox with the contents when the cell is clicked on
        /// </summary>
        private void UpdateValuesOnClick()
        {
            CellValueTextBox.Text = "";
            // get column and row location
            grid_widget.GetSelection(out int col, out int row);
            // use ascii value to convert column location to a letter
            char letter = (char)('A' + col);
            // set column location as a string instead of a char
            string colLocation = "" + letter;
            // append colLocation and and 1 to row and set to cellLocation
            row++;
            string cellLocation = colLocation + row.ToString();
            // calculate value of cell
            string cellValue = spreadsheet.GetCellValue(cellLocation).ToString();
            // CellValueTextBox.AppendText(spreadsheet.GetCellValue(cellLocation).ToString());
            CellValueTextBox.Text = spreadsheet.GetCellValue(cellLocation).ToString();
        }
    }
}
